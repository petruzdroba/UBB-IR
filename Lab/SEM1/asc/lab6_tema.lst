     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;   ex 19
    14                                      ;   Se dau 2 siruri de octeti A si B. Sa se construiasca
    15                                      ;   sirul R care sa contina doar elementele pare
    16                                      ;   si negative din cele 2 siruri.
    17                                      
    18 00000000 020103FDFC02FA              a db 2, 1, 3, -3, -4, 2, -6
    19 00000007 0405FB07FAFE01              b db 4, 5, -5, 7, -6, -2, 1
    20                                      len equ $ - b
    21 0000000E 00<rept>                    r times len db 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 B907000000                      mov ecx, len
    27 00000005 E34A                            jecxz final
    28                                          
    29 00000007 BE00000000                      mov esi, 0
    30 0000000C BF00000000                      mov edi, 0
    31                                                      
    32                                          repeta:
    33 00000011 8A86[00000000]                      mov al, [a + esi]
    34                                              
    35 00000017 3C00                                cmp al, 0
    36 00000019 7D0D                                jge next    ;jump greater or equal  
    37                                              
    38 0000001B A801                                test al, 1  ;testez paritatea elementului curent
    39 0000001D 7402                                jz e_par
    40                                              ; e impar
    41 0000001F EB07                                jmp next
    42                                              e_par:
    43 00000021 8887[0E000000]                          mov [r + edi], al
    44 00000027 47                                      inc edi
    45                                              next:
    46 00000028 46                                      inc esi
    47 00000029 E2E6                            loop repeta
    48                                          
    49 0000002B B907000000                      mov ecx, len
    50 00000030 E31F                            jecxz final
    51                                          
    52 00000032 BE00000000                      mov esi, 0
    53                                          
    54                                          repeta_1:
    55 00000037 8A86[07000000]                      mov al, [b + esi]
    56                                              
    57 0000003D 3C00                                cmp al, 0
    58 0000003F 7D0D                                jge next_1
    59                                              
    60 00000041 A801                                test al, 1
    61 00000043 7402                                jz e_par_1
    62                                              ; e impar
    63 00000045 EB07                                jmp next_1
    64                                              e_par_1:
    65 00000047 8887[0E000000]                          mov [r + edi], al
    66 0000004D 47                                      inc edi
    67                                              next_1:
    68 0000004E 46                                      inc esi
    69 0000004F E2E6                            loop repeta_1
    70                                          
    71                                          final:
    72                                          ; exit(0)
    73 00000051 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 00000053 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
