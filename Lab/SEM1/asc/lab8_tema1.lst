     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import scanf msvcrt.dll 
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ;ex 14
    16                                      ;Sa se citeasca de la tastatura doua numere a si b (in baza 16) si sa se calculeze a+b.
    17                                      ;Sa se afiseze rezultatul adunarii in baza 10.
    18 00000000 00000000                    a dd 0
    19 00000004 00000000                    b dd 0
    20 00000008 257800                      formath db "%x", 0  ;formatul din C pentru hexa
    21 0000000B 256400                      formatd db "%d", 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;punem pe stiva argumentele de la dreapta la stanga
    27 00000000 68[00000000]                    push dword a
    28 00000005 68[08000000]                    push dword formath
    29 0000000A FF15[00000000]                  call [scanf]
    30                                          
    31 00000010 83C408                          add esp, 4*2    ; curatam stiva, inainte de urmatorul apel
    32                                          
    33 00000013 68[04000000]                    push dword b
    34 00000018 68[08000000]                    push dword formath
    35 0000001D FF15[00000000]                  call [scanf]
    36                                          
    37 00000023 83C408                          add esp, 4*2
    38                                          
    39                                          
    40 00000026 A1[00000000]                    mov eax,[a]
    41 0000002B 0305[04000000]                  add eax,[b]
    42                                          
    43 00000031 50                              push eax
    44 00000032 68[0B000000]                    push dword formatd
    45 00000037 FF15[00000000]                  call[printf]
    46                                          
    47 0000003D 83C408                          add esp, 4*2
    48                                      
    49                                          ; exit(0)
    50 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
