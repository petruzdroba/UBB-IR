     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll    
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;citire
    14 00000000 78                          n db 120
    15 00000001 6E203D2025640D0A00          format_a db "n = %d", 13,10, 0   ;in C sirurile se termina cu zero, 13 si 10 reprezinta enter in windows
    16                                      
    17 0000000A 48                          c db 'H'
    18 0000000B 636172616374657275-         format_c db "caracterul este %c",13,10, 0
    18 00000014 6C2065737465202563-
    18 0000001D 0D0A00             
    19                                      
    20 00000020 6F000000                    n1 dd 111
    21 00000024 DE000000                    n2 dd 222
    22 00000028 4D010000                    n3 dd 333
    23                                      
    24 0000002C 25642025642025640D-         format_b db "%d %d %d",13,10, 0
    24 00000035 0A00               
    25                                      
    26 00000037 616E6120617265206D-         sir db "ana are mere ", 0
    26 00000040 6572652000         
    27 00000045 25730D0A00                  format_s db "%s", 13,10,0
    28                                      
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; afisez un intreg
    33                                          ; printf("n = %d", n) asta este in C
    34 00000000 31C0                            xor eax, eax
    35 00000002 A0[00000000]                    mov al, [n] ; se pune si n pe stiva
    36 00000007 50                              push eax    ;deoarece nu pot pune un octet pe stiva, minim cuvant
    37                                          
    38 00000008 68[01000000]                    push dword format_a   ;punem offsetul pe stiva
    39                                          
    40 0000000D FF15[00000000]                  call [printf]
    41 00000013 83C408                          add esp, 4*2    ;mu indicatorul de stiva mai jos , "eliberarea argumentelor"
    42                                          
    43                                          ;printf("%d %d %d", n1,n2,n3)
    44 00000016 B8[28000000]                    mov eax, n3
    45 0000001B 50                              push eax
    46 0000001C B8[24000000]                    mov eax, n2
    47 00000021 50                              push eax
    48 00000022 B8[20000000]                    mov eax , n1
    49 00000027 50                              push eax
    50                                          
    51 00000028 68[2C000000]                    push dword format_b
    52                                          
    53 0000002D FF15[00000000]                  call [printf]
    54 00000033 83C410                          add esp, 4*4    ; 4 pentru ca avem patru argumente si 4 pentru ca sunt dublu cuvinte
    55                                          
    56                                          
    57                                          ;adisez un caracer
    58                                          ;printf("%c", c)
    59                                          
    60 00000036 31C0                            xor eax, eax
    61 00000038 A0[0A000000]                    mov al, [c]     ;EAX = c
    62 0000003D 50                              push eax
    63                                          
    64 0000003E 68[0B000000]                    push dword format_c
    65                                          
    66 00000043 FF15[00000000]                  call[printf]
    67                                          
    68 00000049 83C408                          add esp, 4*2    ;mu indicatorul de stiva mai jos , "eliberarea argumentelor"
    69                                          
    70                                          ;afisex un si de caractere
    71                                          ;printf("%s", sir)
    72                                          
    73 0000004C 68[37000000]                    push dword sir
    74 00000051 68[45000000]                    push dword format_s
    75                                          
    76 00000056 FF15[00000000]                  call[printf]
    77                                          
    78 0000005C 83C408                          add esp, 2*4
    79                                      
    80                                          ; exit(0)
    81 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    82 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
