     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, fopen, fscanf, fclose          
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll 
    10                                  import fopen msvcrt.dll
    11                                  import fscanf msvcrt.dll
    12                                  import fclose msvcrt.dll   
    13                                                            
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; Se citesc din fisier un sir de numere
    18                                      ; Sa se afiseze suma numerelor negative si pare
    19                                      
    20 00000000 6C616231322E747874-         nume_fisier db 'lab12.txt', 0
    20 00000009 00                 
    21 0000000A 7200                        mod_acces db 'r', 0
    22                                      
    23 0000000C FFFFFFFF                    descriptor dd -1
    24                                      
    25 00000010 256400                      formatc db '%d', 0
    26                                      
    27 00000013 00000000                    n dd 0
    28 00000017 00000000<rept>              sir times 100 dd 0
    29                                      
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33 00000000 68[0A000000]                    push dword mod_acces
    34 00000005 68[00000000]                    push dword nume_fisier
    35 0000000A FF15[00000000]                  call [fopen]
    36                                          
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39 00000013 A3[0C000000]                    mov [descriptor], eax
    40 00000018 83F800                          cmp eax, 0
    41 0000001B 743F                            je final
    42                                          
    43 0000001D BF[17000000]                    mov edi, sir
    44 00000022 FC                              cld
    45                                          
    46 00000023 31DB                            xor ebx, ebx
    47                                          
    48                                          citire:
    49 00000025 68[13000000]                        push dword n
    50 0000002A 68[10000000]                        push dword formatc
    51 0000002F FF35[0C000000]                      push dword [descriptor]
    52 00000035 FF15[00000000]                      call [fscanf]
    53                                              
    54 0000003B A1[13000000]                        mov eax, [n]
    55 00000040 83F800                              cmp eax, 0
    56                                              ;stosd
    57                                              
    58 00000043 7411                                je skip
    59 00000045 7C02                                jl e_negativ
    60 00000047 EB0B                                jmp skip2
    61                                              e_negativ:
    62 00000049 A901000000                              test eax, 1
    63 0000004E 7402                                    jz e_par
    64 00000050 EB02                                    jmp skip2
    65                                                  e_par:
    66 00000052 01C3                                       add ebx, eax
    67                                                
    68                                              skip2:
    69 00000054 EBCF                            jmp citire
    70                                          skip:
    71 00000056 891D[13000000]                      mov [n], ebx
    72                                          final:
    73                                          ; exit(0)
    74 0000005C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 0000005E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
