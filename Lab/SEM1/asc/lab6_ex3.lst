     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  
     7                                  segment data use32 class=data
     8 00000000 1213151822252730            s db 12h, 13h, 15h, 18h, 22h, 25h, 27h, 30h
     9                                      len equ $ - s
    10 00000008 00<rept>                    s1 times len db 0
    11 00000010 00<rept>                    s2 times len db 0
    12                                      
    13                                  ; Se da un sir de numere intregi s.
    14                                  ; Se cere sa se determine sirurile de numere intregi:
    15                                  ; s1 - care contine doar numerele intregi pare din sirul s
    16                                  ; s2 - care contine doar numerele intregi impare din sirul s
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 B908000000                      mov ecx, len
    20 00000005 E32C                            jecxz final
    21                                          
    22                                          
    23 00000007 BE00000000                      mov esi, 0
    24                                          
    25 0000000C BF00000000                      mov edi, 0
    26 00000011 BB00000000                      mov ebx, 0
    27                                          repeta:
    28 00000016 8A86[00000000]                      mov al, [s + esi]
    29 0000001C A801                                test al, 1
    30 0000001E 7509                                jnz e_par
    31                                              ;e-impar
    32 00000020 8883[10000000]                      mov [s2 + ebx], al
    33 00000026 43                                  inc ebx
    34 00000027 EB07                                jmp next
    35                                              e_par:
    36 00000029 8887[08000000]                          mov [s1 + edi], al
    37 0000002F 47                                      inc edi
    38                                              next:
    39 00000030 46                                  inc esi
    40 00000031 E2E3                            loop repeta
    41                                          
    42                                          final:
    43                                          ; exit(0)
    44 00000033 6A00                            push dword 0        ; push the parameter for exit onto the stack
    45 00000035 FF15[00000000]                  call [exit]         ; call exit to terminate the program
