     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf, fopen, fprintf, fclose          
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fclose msvcrt.dll  
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      
    17 00000000 6C616231325F657832-         nume_fisier db 'lab12_ex2.txt', 0
    17 00000009 2E74787400         
    18 0000000E 6100                        mod_acces db 'a', 0
    19 00000010 FFFFFFFF                    descriptor dd -1
    20                                      
    21 00000014 00000000<rept>              cuvant times 5 dd 0
    22 00000028 257300                      format db '%s', 0
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27 00000000 68[0E000000]                    push dword mod_acces
    28 00000005 68[00000000]                    push dword nume_fisier
    29 0000000A FF15[00000000]                  call [fopen]
    30                                          
    31 00000010 A3[10000000]                    mov [descriptor], eax
    32 00000015 83F800                          cmp eax, 0
    33 00000018 7446                            je final
    34                                          
    35                                          repeta:
    36 0000001A 68[14000000]                        push dword cuvant
    37 0000001F 68[28000000]                        push dword format
    38 00000024 FF15[00000000]                      call [scanf]
    39 0000002A 83C408                              add esp, 4*2
    40                                              
    41 0000002D A1[14000000]                        mov eax, [cuvant]
    42 00000032 3C24                                cmp al, '$'
    43 00000034 741B                                je skip
    44                                              
    45                                              
    46 00000036 68[14000000]                        push dword cuvant
    47 0000003B 68[28000000]                        push dword format
    48 00000040 FF35[10000000]                      push dword [descriptor]
    49 00000046 FF15[00000000]                      call[fprintf]                                                                                                                   
    50 0000004C 83C40C                              add esp, 4*3
    51                                              
    52 0000004F EBC9                            jmp repeta
    53                                          skip:
    54 00000051 FF35[10000000]                      push dword [descriptor]
    55 00000057 FF15[00000000]                      call [fclose]
    56 0000005D 83C404                              add esp, 4
    57                                          final:
    58                                          ; exit(0)
    59 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
