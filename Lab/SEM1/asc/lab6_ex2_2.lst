     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 616263646566                s db 'abcdef'
    14                                      len equ $ - s
    15 00000006 00<rept>                    d times len db 0
    16                                      
    17                                  ; Se da un sir de caractere s.
    18                                  ; Se cere sirul de caractere d obtinut prin inversarea sirului s.
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 B906000000                      mov ecx, len
    24 00000005 E310                            jecxz final
    25                                          
    26 00000007 BE[05000000]                    mov esi, s + len - 1    ; ne pozitionam in s la capatul sirului
    27 0000000C BF[06000000]                    mov edi, d
    28                                          
    29                                          repeta:
    30 00000011 FD                                  std     ;set direction - decrementare
    31 00000012 AC                                  lodsb       ; pt ca DF = 1, acesta s decrmenteaza
    32 00000013 FC                                  cld     ; acum se incrementeaza
    33 00000014 AA                                  stosb
    34 00000015 E2FA                            loop repeta
    35                                          
    36                                          final:
    37                                          ; exit(0)
    38 00000017 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    39 00000019 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
